# Copyright 2016 Mirantis, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import mock
import unittest2

from fuel_agent import errors
from fuel_agent.utils import provision


class TestProvisionUtils(unittest2.TestCase):

    def test_udev_nic_naming_rules(self):
        udevrules = "08:00:27:79:da:80_eth0,08:00:27:46:43:60_eth1,"\
                    "08:00:27:b1:d7:15_eth2"
        with mock.patch.object(provision, 'open', create=True) as mock_open:
            file_handle_mock = mock_open.return_value.__enter__.return_value
            provision.udev_nic_naming_rules('/tmp/target', udevrules)
            expected_open_calls = [
                mock.call('/tmp/target/etc/udev/rules.d/70-persistent-net.'
                          'rules', 'wt', encoding='utf-8'),
                mock.call('/tmp/target/etc/udev/rules.d/75-persistent-net-'
                          'generator.rules', 'wt', encoding='utf-8')]
            self.assertEqual(expected_open_calls, mock_open.call_args_list)
            expected_write_calls = [
                mock.call('# Generated by fuel-agent during provisioning: '
                          'BEGIN\n'),
                mock.call('SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", '
                          'ATTR{address}=="08:00:27:79:da:80", ATTR{type}=="1"'
                          ', KERNEL=="eth*", NAME="eth0"\n'),
                mock.call('SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", '
                          'ATTR{address}=="08:00:27:46:43:60", ATTR{type}=="1"'
                          ', KERNEL=="eth*", NAME="eth1"\n'),
                mock.call('SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", '
                          'ATTR{address}=="08:00:27:b1:d7:15", ATTR{type}=="1"'
                          ', KERNEL=="eth*", NAME="eth2"\n'),
                mock.call('# Generated by fuel-agent during provisioning: '
                          'END\n'),
                mock.call('# Generated by fuel-agent during provisioning:\n# '
                          'DO NOT DELETE. It is needed to disable '
                          'net-generator\n'),
            ]
            self.assertEqual(expected_write_calls,
                             file_handle_mock.write.call_args_list)

    @mock.patch.object(provision, 'os', autospec=True)
    def test_configure_admin_nic_failed(self, mock_os):
        mock_os.path.exists.return_value = False
        self.assertRaises(errors.UnsupportedNetworkConfiguration,
                          provision.configure_admin_nic,
                          'chroot', 'iface', 'ip', 'netmask', 'gw')
        self.assertEqual([mock.call('chroot/etc/network/interfaces'),
                          mock.call('chroot/etc/sysconfig/network-scripts')],
                         mock_os.path.exists.call_args_list)

    @mock.patch.object(provision, 'utils', autospec=True)
    def test_configure_admin_nic_ubuntu(self, mock_utils):
        with mock.patch.object(provision, 'open', create=True) as mock_open:
            file_handle_mock = mock_open.return_value.__enter__.return_value
            provision.configure_admin_nic_ubuntu(
                '/tmp/target', 'IFACE', 'IP', 'NETMASK', 'GW')
            expected_open_calls = [
                mock.call('/tmp/target/etc/network/interfaces',
                          'wt', encoding='utf-8'),
                mock.call('/tmp/target/etc/network/interfaces.d/ifcfg-IFACE',
                          'wt', encoding='utf-8')]
            self.assertEqual(expected_open_calls, mock_open.call_args_list)
            expected_write_calls = [
                mock.call(u'# Generated by fuel-agent during provisioning:\n'
                          u'source-directory /etc/network/interfaces.d\n'),
                mock.call(u'# Generated by fuel-agent during provisioning:\n'
                          u'auto IFACE\n'
                          u'iface IFACE inet static\n'
                          u'\taddress IP\n'
                          u'\tnetmask NETMASK\n'
                          u'\tgateway GW\n'),
            ]
            self.assertEqual(expected_write_calls,
                             file_handle_mock.write.call_args_list)

    @mock.patch.object(provision, 'utils', autospec=True)
    def test_configure_admin_nic_centos(self, mock_utils):
        with mock.patch.object(provision, 'open', create=True) as mock_open:
            file_handle_mock = mock_open.return_value.__enter__.return_value
            provision.configure_admin_nic_centos(
                '/tmp/target', 'IFACE', 'IP', 'NETMASK', 'GW')
            expected_open_calls = [
                mock.call('/tmp/target/etc/sysconfig/network-scripts/'
                          'ifcfg-IFACE',
                          'wt', encoding='utf-8'),
                mock.call('/tmp/target/etc/sysconfig/network',
                          'at', encoding='utf-8')]
            self.assertEqual(expected_open_calls, mock_open.call_args_list)
            expected_write_calls = [
                mock.call(u'# Generated by fuel-agent during provisioning:\n'
                          u'DEVICE=IFACE\n'
                          u'IPADDR=IP\n'
                          u'NETMASK=NETMASK\n'
                          u'BOOTPROTO=none\n'
                          u'ONBOOT=yes\n'
                          u'USERCTL=no\n'),
                mock.call(u'GATEWAY="GW"\n'),
            ]
            self.assertEqual(expected_write_calls,
                             file_handle_mock.write.call_args_list)
